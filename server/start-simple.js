// server/start-simple.js - –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');
const path = require('path');

const app = express();
const server = http.createServer(app);

// FIX: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO CORS —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ origins
const io = socketIo(server, {
  cors: {
    origin: [
      "http://localhost:1234", 
      "http://localhost:4000", 
      "http://localhost:3000",
      "http://127.0.0.1:1234"
    ], 
    methods: ["GET", "POST"],
    credentials: true,
    allowedHeaders: ["Authorization", "Content-Type"]
  },
  transports: ['websocket', 'polling'],
  allowEIO3: true // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
});

const JWT_SECRET = process.env.JWT_SECRET || 'battle-game-test-secret-2024';
const PORT = process.env.PORT || 4000;

// Rate limiting - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 200, // —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  message: { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' },
  standardHeaders: true,
  legacyHeaders: false
});

// Middleware
app.use(limiter);
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// CORS –¥–ª—è REST API
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, '../client/dist')));

// FIX: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JWT middleware —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
const authenticateToken = (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    
    // FIX: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
    if (!authHeader) {
      return res.status(401).json({ error: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }
    
    const parts = authHeader.split(' ');
    if (parts.length !== 2 || parts[0] !== 'Bearer') {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Bearer <token>' });
    }
    
    const token = parts[1]; // –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
      if (err) {
        console.error('JWT verification error:', err.message);
        return res.status(403).json({ 
          error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
          details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
      }
      req.user = user;
      next();
    });
  } catch (error) {
    console.error('Auth middleware error:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
const activePlayers = new Map();
const activeMatches = new Map();
const waitingQueue = [];

// FIX: —É–ª—É—á—à–µ–Ω–Ω—ã–µ Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log(`üîó –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
  activePlayers.set(socket.id, {
    id: socket.id,
    nickname: `–ò–≥—Ä–æ–∫_${socket.id.slice(-4)}`,
    hp: 100,
    ready: false,
    joinedAt: new Date()
  });

  // –ü–æ–∏—Å–∫ –±–æ—è
  socket.on('findBattle', async (data) => {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –±–æ—è –æ—Ç ${socket.id}:`, data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –±–æ—é –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
      if (activeMatches.has(socket.id)) {
        socket.emit('battleError', { error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –±–æ—é!' });
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞
      if (!waitingQueue.find(p => p.id === socket.id)) {
        waitingQueue.push({
          id: socket.id,
          socket: socket,
          timestamp: new Date()
        });
      }

      socket.emit('searchingBattle', { 
        message: '–ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...',
        playerId: socket.id,
        queuePosition: waitingQueue.length
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      if (waitingQueue.length >= 2) {
        const player1 = waitingQueue.shift();
        const player2 = waitingQueue.shift();
        
        const matchId = `match_${Date.now()}`;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
        const match = {
          id: matchId,
          players: {
            [player1.id]: { 
              ...activePlayers.get(player1.id),
              socket: player1.socket,
              attackZone: null,
              blockZone: null
            },
            [player2.id]: { 
              ...activePlayers.get(player2.id),
              socket: player2.socket,
              attackZone: null,
              blockZone: null
            }
          },
          round: 1,
          status: 'fighting',
          createdAt: new Date()
        };

        activeMatches.set(player1.id, match);
        activeMatches.set(player2.id, match);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        player1.socket.emit('battleFound', {
          matchId: matchId,
          opponent: {
            id: player2.id,
            nickname: activePlayers.get(player2.id).nickname,
            hp: 100
          }
        });

        player2.socket.emit('battleFound', {
          matchId: matchId,
          opponent: {
            id: player1.id,
            nickname: activePlayers.get(player1.id).nickname,
            hp: 100
          }
        });

        console.log(`‚öîÔ∏è –ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω: ${matchId} - ${player1.id} vs ${player2.id}`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–æ—è:', error);
      socket.emit('battleError', { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
        details: error.message
      });
    }
  });

  // –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –±–æ—é
  socket.on('player:action', async (action) => {
    try {
      const match = activeMatches.get(socket.id);
      if (!match) {
        socket.emit('battleError', { error: '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –±–æ—é!' });
        return;
      }

      const player = match.players[socket.id];
      if (!player) {
        socket.emit('battleError', { error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ç—á–µ!' });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
      player.attackZone = action.attackZone;
      player.blockZone = action.blockZone;
      player.ready = true;

      console.log(`üéØ –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ ${socket.id}:`, action);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
      const players = Object.values(match.players);
      const allReady = players.every(p => p.ready);

      if (allReady) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
        const [player1, player2] = players;
        let battleResult = calculateBattleResult(player1, player2);

        // –û–±–Ω–æ–≤–ª—è–µ–º HP –∏–≥—Ä–æ–∫–æ–≤
        match.players[player1.id].hp = Math.max(0, battleResult.player1.hp);
        match.players[player2.id].hp = Math.max(0, battleResult.player2.hp);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        Object.values(match.players).forEach(p => {
          p.socket.emit('battle:result', {
            round: match.round,
            message: battleResult.message,
            players: {
              [player1.id]: { 
                id: player1.id, 
                nickname: player1.nickname, 
                hp: match.players[player1.id].hp,
                attackZone: player1.attackZone,
                blockZone: player1.blockZone
              },
              [player2.id]: { 
                id: player2.id, 
                nickname: player2.nickname, 
                hp: match.players[player2.id].hp,
                attackZone: player2.attackZone,
                blockZone: player2.blockZone
              }
            }
          });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if (match.players[player1.id].hp <= 0 || match.players[player2.id].hp <= 0) {
          const winner = match.players[player1.id].hp > 0 ? player1 : player2;
          
          Object.values(match.players).forEach(p => {
            p.socket.emit('battle:end', {
              winner: winner.id,
              message: `${winner.nickname} –ø–æ–±–µ–¥–∏–ª!`,
              players: {
                [player1.id]: { 
                  id: player1.id, 
                  nickname: player1.nickname, 
                  hp: match.players[player1.id].hp 
                },
                [player2.id]: { 
                  id: player2.id, 
                  nickname: player2.nickname, 
                  hp: match.players[player2.id].hp 
                }
              }
            });
          });

          // –£–¥–∞–ª—è–µ–º –º–∞—Ç—á
          activeMatches.delete(player1.id);
          activeMatches.delete(player2.id);
        } else {
          // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
          match.round++;
          Object.values(match.players).forEach(p => {
            p.ready = false;
            p.attackZone = null;
            p.blockZone = null;
          });
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è:', error);
      socket.emit('battleError', { 
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è',
        details: error.message
      });
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  socket.on('disconnect', () => {
    console.log(`‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    activePlayers.delete(socket.id);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
    const queueIndex = waitingQueue.findIndex(p => p.id === socket.id);
    if (queueIndex !== -1) {
      waitingQueue.splice(queueIndex, 1);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á
    const match = activeMatches.get(socket.id);
    if (match) {
      const opponent = Object.values(match.players).find(p => p.id !== socket.id);
      if (opponent) {
        opponent.socket.emit('battle:end', {
          message: '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!',
          winner: opponent.id
        });
        activeMatches.delete(opponent.id);
      }
      activeMatches.delete(socket.id);
    }
  });
});

// FIX: —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
function calculateBattleResult(player1, player2) {
  const BASE_DAMAGE = 10;
  
  let damage1 = 0; // —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É 1
  let damage2 = 0; // —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É 2
  
  let actions = [];
  
  // –ò–≥—Ä–æ–∫ 1 –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞ 2
  if (player1.attackZone !== player2.blockZone) {
    damage2 = BASE_DAMAGE;
    actions.push(`${player1.nickname} –ø–æ–ø–∞–ª –ø–æ –∑–æ–Ω–µ ${player1.attackZone} (${BASE_DAMAGE} —É—Ä–æ–Ω–∞)`);
  } else {
    actions.push(`${player1.nickname} –∞—Ç–∞–∫–æ–≤–∞–ª –≤ ${player1.attackZone}, –Ω–æ ${player2.nickname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª`);
  }
  
  // –ò–≥—Ä–æ–∫ 2 –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞ 1
  if (player2.attackZone !== player1.blockZone) {
    damage1 = BASE_DAMAGE;
    actions.push(`${player2.nickname} –ø–æ–ø–∞–ª –ø–æ –∑–æ–Ω–µ ${player2.attackZone} (${BASE_DAMAGE} —É—Ä–æ–Ω–∞)`);
  } else {
    actions.push(`${player2.nickname} –∞—Ç–∞–∫–æ–≤–∞–ª –≤ ${player2.attackZone}, –Ω–æ ${player1.nickname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª`);
  }
  
  return {
    player1: { hp: player1.hp - damage1 },
    player2: { hp: player2.hp - damage2 },
    message: actions.join('; ')
  };
}

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Fight Game API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    stats: {
      activePlayers: activePlayers.size,
      activeMatches: activeMatches.size,
      waitingQueue: waitingQueue.length
    }
  });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/stats', (req, res) => {
  res.json({
    activePlayers: Array.from(activePlayers.keys()),
    activeMatches: Array.from(activeMatches.keys()),
    waitingQueue: waitingQueue.map(p => ({ id: p.id, timestamp: p.timestamp }))
  });
});

// FIX: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π wildcard –¥–ª—è SPA
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../client/dist/index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
  });
});

server.listen(PORT, () => {
  console.log(`üöÄ ================================`);
  console.log(`üéÆ FIGHT GAME SERVER (–ò–°–ü–†–ê–í–õ–ï–ù–û)`);
  console.log(`üöÄ ================================`);
  console.log(`üìç Port: ${PORT}`);
  console.log(`üåê API Health: http://localhost:${PORT}/api/health`);
  console.log(`üìä API Stats: http://localhost:${PORT}/api/stats`);
  console.log(`üéØ Game Client: http://localhost:1234`);
  console.log(`‚úÖ Socket.IO –≥–æ—Ç–æ–≤ –¥–ª—è real-time –±–æ–µ–≤!`);
  console.log(`üîß CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ—Ä—Ç–æ–≤: 1234, 3000, 4000`);
});